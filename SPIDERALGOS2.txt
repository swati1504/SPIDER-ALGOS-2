SWATI PARIDA
SPIDER ALGOS 2


TASK 2A-FIND THE LENGTH

#include<stdio.h>
#include<string.h>
int main()
{
    int t;
    scanf("%d",&t);
    int sum,c;

    for(int j=1;j<=t;j++)
    {
        sum=0; c=0;
        char str[1000000];
        scanf("%s",str);
        int n = strlen(str);
        for(int i=0;i<n;i++)
        {
            if (str[i]=='<')
                c=c+1;
            else
                c=c-1;

            if (c<0)
                break;

            if (c==0)
                sum=i+1;
        }
        printf("%d\n",sum);
    }
}

EXPLANATION:
A counter variable c has been taken that would increase by 1 if it is '<' and decrease by 1 if it is '>'...in this way if c=0 
that means a proper balanced prefix has been found and the variable sum would store the length of the longest balanced prefix that has been yet.

****************************************************************************************************************

TASK 2B-MAXIMUM ELEMENT IN ARRAY

#include<stdio.h>
int main()
{
int n,l,r,q;int v;int arr[100000];
scanf("%d\n%d",&n,&q);
for(int i=0;i<n;i++)
{
    arr[i]=i+1;
}
for(int i=1;i<=q;i++)
{
scanf("%d %d %d",&l,&r,&v);
for(int j=l-1;j<=r-1;j++)
{
arr[j]=arr[j]+v;
}
}

 int max=arr[0];
 for(int i=0;i<n;i++)
 {
     if(arr[i]>max)
        max=arr[i];
 }
 printf("%d",max);
}

EXPLANATION:
A pretty simple code.
Have added the value v from the index positions l to r and then found out the maximum element in that array and 
show the output max.

**************************************************************************************************************************
MAXIMUM ELEMENT IN ARRAY 2

#include<iostream>
using namespace std;

int main()
{
    int n,l,r,q,v;
    scanf("%d\n%d",&n,&q);
    int arr[n]; int pre[n];
    for(int i=0;i<n;i++)
    {
        arr[i]=i+1;
    }
    for(int i=1;i<=q;i++)
    {
        scanf("%d %d %d",&l,&r,&v);
        arr[l-1] +=v;
        arr[r] -=v;
    }
    pre[0]=arr[0];
    for(int i=1;i<n;i++)
    {
    pre[i] = pre[i-1] + arr[i] -i;
    }
    int max=pre[0];
 for(int i=0;i<n;i++)
 {
     if(pre[i]>max)
        max=pre[i];
 }
 printf("%d",max);
}

EXPLANATION:
Have used the concept of prefix sum array.
There are 2 arrays, the main array arr[] and another array pre[]. In array pre[], the values are stored as the sum of the
previous element + the value at that particular index pos of arr[].Finally maximum element max is found from this array pre[]. 

***************************************************************************************************************************
TASK 2C-STAIR PROBLEM

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int CountWays(int n){
    if(n==1)
        return 1;
    else if(n==2)
        return 1;
    else{
        int a=1,b=1,c=0;
        for (int i=2; i<n; i++){
            c=(a+b)%1000000007;
            a=b;
            b=c;
        }
        return c;
    }
    return 0;
}

int main() {
    int n,m;
    cin >> n >> m;

    int result=1;
    int start=0;

    for (int i=0; i<m; i++){
        int broken;
        cin>>broken;

        if(broken==start){
            result=0;
            break;
        }
        else{
            result= ((long long int) result * CountWays(broken-start) ) % 1000000007 ;
            start=broken+1;
        }
    }
    if(n+1==start){
        result=0;
    }else{
        result=((long long int) result * CountWays(n+1-start))%1000000007;
    }

    cout << result;

    return 0;
}

EXPLANATION:
Have taken two variables result=1 and start=0 initially.The function CountWays() is used here to do the main manipulations.
The concept used there is the same as that of the fibonacci series.
The value of result gets updated when broken step is not 0 and the value of start gets updated to broken step +1.
If m=0 ,i.e, no. of broken steps=0, then the fibonacci series gets in use directly.

************************************************************************************************************************

TASK 2D-MAXIMUM POSSIBLE SUM

#include <stdio.h>

int main() 
{
    int n,i,sum=0;
    scanf("%d",&n);
    int a[n],b[n-1];
    for(i=0;i<n-1;i++)
   scanf("%d",&b[i]);
     a[0]=b[0];
    sum+=a[0];
     for(i=1;i<=n-2;i++)
     {
         if(b[i]>b[i-1])
          {   a[i]=b[i-1];
              sum+=a[i];  
          }
         else
            { a[i]=b[i];
              sum+=a[i];
            }
     }
     a[n-1]=b[n-2];
    sum+=a[n-1];

    printf("%d",sum);
    return 0;
}

EXPLANATION:
A simple code that checks the conditions and accordingly adds to the elements of the array a[].If the b[i]>b[i-1] then a[i] gets
the same value as b[i-1] and if b[i]<b[i-1] then a[i] gets the same value as b[i].In all the steps,these elements of a[] gets added
to the variable sum.Finally,it will show the output sum ,that is the sum of the elements of array a[].

****************************************************************************************************************************